#!/usr/bin/env python'''name: 闭包author: li zhangdate: 2019/9/23'''# 闭包和匿名函数不同# 闭包发生在 在函数中定义函数def make_averager():    series = []    def averager(new_value):        series.append(new_value)        total = sum(series)        print(total/len(series))    return averageravg = make_averager()print(avg)avg(10)# 闭包函数有点难以理解的。。。？？？# 在闭包中有个自由变量的概念，对于可变的变量，需要nonlocal来修饰一下# nonlocal声明# 实现一个简单的装饰器import timedef clock(func):    def clocked(*args): # 内部定义函数，可以参入任意个参数        print('我已经自动执行了')        t0 = time.perf_counter()        result = func(*args)        elapsed = time.perf_counter() - t0        name = func.__name__        arg_str = ', '.join(repr(arg) for arg in args)        print('[%0.8fs] %s(%s) -> %r' % (elapsed, name, arg_str, result))        return result    return clocked@clockdef snooze(seconds):    time.sleep(seconds)@clockdef factorial(n):    return 1 if n < 2 else n*factorial(n-1)if __name__=='__main__':    print('*' * 40, 'Calling snooze(.123)')    snooze(.123)    print('*' * 40, 'Calling factorial(6)')    print('6! =', factorial(6))# so装饰器，闭包，还是没有明白# property classmethod staticmethod# lru_cache singledispath