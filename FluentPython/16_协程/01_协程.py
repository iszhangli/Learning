# !/usr/bin/env python# -*- coding:utf-8 -*-# name: 01_协程 # author: li zhang# date: 2019/12/2# 生成器如何进化成协程# 协程是指一个过程，这个过程与调用方协作，产出由调用方提供的值# 调用方 产出# .send() .throw() .close()# 协程使用生成器函数定义，定义体中有yield 关键字import inspectdef simple_cor():    print('-> cor started')    x = yield  # yield 在表达式中使用，如果协程只需要从客户那里接受数据，    print('-> cor received: ', x)my_cor = simple_cor()  #print(inspect.getgeneratorstate(my_cor))  # 等候开始执行print(my_cor)print(inspect.getgeneratorstate(my_cor))# for i in my_cor:#     print(inspect.getgeneratorstate(my_cor))#     print(i)#     print(inspect.getgeneratorstate(my_cor))# next(my_cor)  # 在这里的时候将内存都用完了# print(inspect.getgeneratorstate(my_cor))# my_cor.send(223)# print(inspect.getgeneratorstate(my_cor))# next(my_cor)# 因为send方法的参数会成为yield表达式的值，print('*'*55)def simple_coro2(a):    print('-> Started: a =', a)    b = yield a    print('-> Received: b =', b)    c = yield a + b    print('-> Received: c =', c)my_coro2 = simple_coro2(1)print(my_coro2)print(inspect.getgeneratorstate(my_coro2))next(my_coro2)my_coro2.send(28)my_coro2.send(238)print(inspect.getgeneratorstate(my_coro2))next(my_coro2)print(inspect.getgeneratorstate(my_coro2))