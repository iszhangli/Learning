# !/usr/bin/env python# -*- coding:utf-8 -*-# name: 02_使用迭代器模式实现sentence类 # author: li zhang# date: 2019/11/25import reimport reprlibRE_WORD = re.compile('\w+') # w匹配非特殊字符，+ 匹配一次或者多次print(RE_WORD)class Sentence(object):    def __init__(self, text):        self.text = text        self.words = RE_WORD.findall(text)        print('words:', self.words)    def __repr__(self):  # 转换成供解释器可以解释的格式        return 'Sentence(%s)' % reprlib.repr(self.text)    def __iter__(self):        return SentenceIterator(self.words)class SentenceIterator:    def __init__(self, words):        self.words = words        self.index = 0    def __next__(self):        try:            word = self.words[self.index]        except IndexError:            raise StopIteration()        self.index += 1        return word    def __iter__(self):        return self# 为了支持多种遍历，在可迭代的实例中获取多个独立的迭代器# 可迭代的对象一定不能是自身的迭代器# 也就是说可迭代的对象必须实现 iter方法，但不能实现 next方法