#!/usr/bin/env python'''name: 31_一等函数 author: li zhangdate: 2019/9/20''''''高阶函数map(function, iter)filter()reduce() 对可迭代的元素进行累计all()any()sorted()dir()  # 查看函数的所有属性reosoperation  itemgetter attrgetter'''# 一等函数定义# 在运行时创建  能赋值给变量或数据结构中的元素  能作为参数传给函数  能作为函数的返回结果# 把函数作为对象的影响和实际应用# 函数对象本身是function类的实例def factorial(n):    '''return n!'''    return nfactorial(1)print(factorial.__doc__)print(type(factorial))print(help(factorial))fact = factorialprint(list(map(factorial, range(10))))# 高阶函数：接受函数作为参数，或者把结果作为返回结果返回的函数names = ['Evan', 'Ryan', 'Dav', 'Peter', 'Hyper']print(sorted(names, key=len), sep='\t')print(names[::-2])# 如何使用不定量的参数调用函数----------------------？# lambda argument_list : expression# 使用列表推导和生成式表达式代替 map filter(过滤序列)print(list(map(fact, range(10))))print([fact(n) for n in range(10)])print(list(filter(lambda n: n % 2, range(10))))print([fact(n) for n in range(10) if n%2])# 内置函数 all any #print(all([100,1,9,1]))  # 每个元素都是真值print(any([1,1,8,0]))  # 只要一个元素是真值# 在参数列表中最适合使用匿名函数sorted(names, key = lambda names: names[::-1])  # 比较高级的表达# 可调用对象# python数据模型文档列出了7中可调用对象# python 中有各种各样的可调用的对象，判断对象是否调用，最安全的方法是使用内置的callable()函数print(callable(len))# 用户定义的可调用的对象,只需要实例方法__call__import randomclass BingoCage:    def __init__(self, items):        self.items = list(items)        random.shuffle(self.items)    def pick(self):        try:            return self.items.pop()        except IndexError:            raise LookupError('pick from empty BingoCage')    def __call__(self):        return self.pick()bingo = BingoCage(range(3))print(bingo.pick())print(callable(bingo))# 探知函数的多有属性print(dir(bingo))# 从定义参数到仅限关键字参数（keyword-only-argument）def tag(name, *content, cls, **attrs):    '''生成一个或者多个html的标签'''    if cls is not None:        attrs['class'] = cls    if attrs:        attr_str = ''.join(' %s="%s"' % (attr, value) for attr, value in sorted(attrs.items()))    else:        attr_str = ''    if content:        return '\n'.join('<%s%s>%s</%s>' % (name, attr_str, c, name) for c in content)    else:        return '<%s%s />' % (name, attr_str)# 函数内省， 从定位参数到仅限关键字参数， 获取关于参数的信息？？？？？def clip(text:str, max_len:'int>0'=80) -> str:    return 1