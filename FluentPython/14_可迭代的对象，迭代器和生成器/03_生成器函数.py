# !/usr/bin/env python# -*- coding:utf-8 -*-# name: 03_生成器函数 # author: li zhang# date: 2019/11/25import reimport reprlibRE_WORD = re.compile('\w+') # w匹配非特殊字符，+ 匹配一次或者多次print(RE_WORD)class Sentence(object):    def __init__(self, text):        self.text = text        self.words = RE_WORD.findall(text)        print('words:', self.words)    def __repr__(self):  # 转换成供解释器可以解释的格式        return 'Sentence(%s)' % reprlib.repr(self.text)    def __iter__(self):        for word in self.words:            yield word        return# done!# 生成器函数式生成器工厂def gen_123():    yield 1    yield 2    yield 3print(gen_123())for i in gen_123():    print(i)g = gen_123()print(next(g))def gen_ABC():    print('start')    yield 'A'    print('continue')    yield 'B'    print('end')    yield 'C'for c in gen_ABC():    print('word:', c)g1 = gen_ABC()print(next(g1))# for 循环中的迭代器等于是使用了next方法# 惰性实现