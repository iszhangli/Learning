#!/usr/bin/env python
# -*- encoding: utf-8 -*-
'''
@Create time : 2020/7/27 16:29
@Author      : zhang li
@Version     : 1.0
'''

# Here put the import lib
'''
输入：A = [1], K = 1
输出：1

输入：A = [1,2], K = 4
输出：-1

输入：A = [2,-1,2], K = 3
输出：3

1 <= A.length <= 50000
-10 ^ 5 <= A[i] <= 10 ^ 5
1 <= K <= 10 ^ 9
'''

import collections

def shortestSubarray(A, K):
    length = len(A)
    flag = False
    min_l = 50001
    for i in range(length):
        for j in range(i+1, length+1):
            if sum(A[i:j]) >= K:
                flag = True
                min_l = min(min_l, j-i)
                break
    if flag:
        return min_l
    else:
        return -1


def shortestSubarray2(A, K):
    n = len(A)
    s = [0] * (n + 1)  # 前n个数的和
    for i in range(n):
        s[i + 1] = s[i] + A[i]

    ans = n+1
    de = collections.deque()
    for y, sy in enumerate(s):

        while de and s[de[-1]] >= sy:
            de.pop()  # 此时以s[y]作为被减数，即左端，所得结果一定优于弹出的元素
        while de and sy - s[de[0]] >= K:
            ans = min(ans, y - de.popleft())  # 如此循环，则可得到所有满足条件的解，然后在其中寻找最小的
        de.append(y)



if __name__ == '__main__':
    A = [-269,691,109,726,-368,362,241,716,-416,244,-348,562,157,696,194,269,268,-291,-18,279,-291,-88,-183,697,673,247,-48,-9,-239,352,874,862,838,552,-50,367,922,-131,-494,10,737,-163,395,-403,51,97,131,587,-275,417,876,-445,358,-356,-279,921,410,412,891,76,987,644,-453,773,721,-414,456,100,-436,14,355,349,524,-167,36,-210,-247,614,325,819,497,-416,178,-359,913,-334,-177,273,884,723,62,509,-11,316,-412,861,-437,928,968,610,287,537,645,71,532,584,-56,823,279,789,26,874,453,-493,-367,210,-368,979,631,836,808,-450,38,-366,-479,-125,362,-65,340,-429,497,229,731,504,46,953,-497,-181,-31,41,902,-169,252,374,-79,-300,9,-439,392,26,-499,629,979,872,-84,739,607,395,554,-233,183,437,-495,641,845,97,107,860,-318,479,415,249,72,552,381,581,479,917,652,-311,632,110,-175,-143,262,915,-436,483,864,-498,514,219,804,717,-87,234,917,-231,539,-438,-4,-438,194,833,-229,-167,619,-285,351,919,-232,-176,516,940,891,-324,946,981,-460,-224,-294,-437,240,-208,806,448,19,-344,453,603,487,-395,149,528,894,-154,-256,188,169,693,356,-250,123,-279,-398,408,-187,-495,138,671,119,-81,-473,218,224,-440,-392,-455,-445,551,29,-234,161,-433,227,196,879,875,503,125,626,46,854,-388,292,-345,-378,407,-324,-299,261,998,648,841,-79,367,-376,143,-113,-70,929,-266,896,190,-8,331,475,465,609,949,-87,-478,-276,500,610,375,-136,-282,-379,888,-237,223,-23,309,45,-43,223,-403,457,-138,-484,-163,983,162,911,764,995,660,-89,512,804,627,693,534,-57,440,675,-353,215,491,48,801,124,463,712,157,521,667,542,497,896,-273,-280,688,605,-262,-21,995,829,960,325,105,148,-277,596,939,875,-23,-82,-222,-378,495,128,259,-164,808,74,230,347,-409,657,844,140,-72,-476,849,-475,-427,922,136,-478,-126,-210,821,390,216,116,361,580,141,905,368,-377,-277,778,233,387,557,794,44,-67,-495,371,-104,208,134,816,72,702,585,718,-14,79,-225,-197,131,-161,767,-61,62,401,814,356,423,658,374,-373,-479,611,280,749,-57,889,724,-90,800,904,344,-7,617,-115,818,471,383,334,407,170,56,692,-36,116,32,309,-323,-122,444,-390,466,514,557,829,215,891,-158,-210,801,533,13,451,829,726,410,83,-434,-84,491,-225,89,-440,446,351,916,117,288,319,-258,44,59,300,498,-44,-110,134,-118,374,331,193,764,-233,-43,-327,35,444,-60,-268,-437,385,794,-242,778,165,827,-5,-92,362,865,898,889,70,64,632,923,521,-402,-128,536,-217,87,916,407,546,-98,874,893,-45,-89,397,841,103,42,-392,-499,102,242,127,156,228,242,-179,436,204,781,748,212,89,83,853,250,-85,145,-489,466,735,-46,723,-254,-368,561,718,-381,44,-423,485,974,-448,-433,164,594,904,-346,247,-86,567,-17,690,68,35,493,-238,569,246,778,-227,-363,335,160,143,400,331,356,195,793,963,556,408,-271,311,469,-80,267,-114,638,385,-305,42,357,409,181,841,315,-3,494,-220,511,-171,658,776,-15,960,-388,886,-275,301,165,613,485,66,527,195,45,-235,635,806,924,328,680,-379,104,813,-39,91,81,-113,698,138,286,623,-115,846,-399,924,475,-280,738,495,135,-499,910,933,114,-243,504,-337,-277,-392,-131,-50,782,625,813,-382,-160,586,415,306,189,872,833,128,165,143,650,-133,-228,345,929,724,167,891,-442,55,587,277,-6,256,580,477,-443,-87,86,27,-71,-294,775,408,-310,466,-267,-194,-192,461,615,550,762,-457,203,732,-334,618,634,659,525,431,473,385,36,386,621,848,839,86,726,628,547,180,-223,-373,-248,120,592,-423,579,14,829,-288,183,586,638,178,948,291,776,209,986,-25,841,465,421,-422,289,-21,196,87,165,-481,854,422,698,470,-251,-485,202,135,566,142,70,321,-135,440,770,-232,92,148,81,158,-409,679,398,324,572,-445,816,176,624,24,397,280,795,966,427,-37,-132,748,373,928,-426,-82,747,215,726,38,-377,564,86,317,-41,584,749,291,77,-332,403,-443,436,752,566,380,-69,519,262,985,858,180,734,766,425,937,365,533,958,-202,908,845,-403,-158,974,-123,-241,-152,367,-267,-147,286,-158,938,281,328,-12,-358,513,-303,113,878,-22,545,174,956,633,778,817,777,426,731,352,650,839,850,695,87,-109,84,429,562,-48,-407,319,-72,968,606,-154,359,518,23,50,-60,-6,866,78,-398,-372,-27,811,-115,601,539,-30,472,327,559,-80,927,-493,810,-249,257,904,894,-27,-454,-173,901,267,-17,47,233,73,-310,-408,604,688,167,-189,53,-30,-437,-60,387,337,504,21,-411,700,272,988,-397,-409,-35,357,503,-167,718,189,-240,673,658,-64,-32,-131,364,-111,815,406,464,345,445,-288,943,144,809,-164,-469,-241,-427,-161,-283,504,971,-194,636,476]
    k = 176614
    result = shortestSubarray2(A, k)
    print(result)