#!/usr/bin/env python'''name: cluster author: li zhangdate: 2019/9/5'''import numpy as np# 儿童发育规律数据CHIlD_INFO = {(1,9.3),              (2,1.8),              (3,1.9),              (4,1.7),              (5,1.5),              (6,1.3),              (7,1.4),              (8,2.0),              (9,1.9),              (10,2.3),              (11,2.1)              }# 离差归一化# (data, k or not, normalization)class Cluster(object):    '''    复现聚类算法，离散聚类，有序聚类    '''    def __init__(self, k=0, norma=False):        self.k = k        self.norma = norma        print('hello, everyone!')    def normalization(self, arr):        '''        离差正交化        :param arr:        :return:        '''        if type(arr) != np.ndarray :            print('input data type error!')        if arr.max() == arr.min():            return arr        else:            mean = np.mean(arr, axis=0)            max = arr.max()            min = arr.min()            return np.array([(i - mean) / (max - min) for i in arr])    def min_cluster(self):        '''        根据直径选最小分类间隔        :return:        '''        return 1    def loss_value(self):        print(self.D)    def diameter(self, arr):        col = arr.shape()[0]        print(col)        self.D = np.zeros((col+1, col+1))        for i in range(col):            for j in range(1,col+1):                print(arr[i:j])                self.D[i][j] = self._square(arr[i:j])        return self.D    def _square(self, arr):        result = 0        for i in range(len(arr)):            result += (arr[i] - self._mean(arr)) * (arr[i] - self._mean(arr))        return result    def _mean(self, arr):        result = 0        for i in range(len(arr)):            result += arr[i]        result = result / len(arr)        return resultif __name__ == '__main__':    cluster = Cluster()    data = np.arange(0,12)  # 生成3*4的矩阵，做测试使用    print(data)    norma = cluster.normalization(data)    print(norma)    data = [9.3,1.8,1.9,1.7,1.5,1.3,1.4,2.0,1.9,2.3,2.1]    #print(data[0:11])    data = np.array(data)    dia = cluster.diameter(data)