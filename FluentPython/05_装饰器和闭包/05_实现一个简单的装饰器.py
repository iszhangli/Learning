# !/usr/bin/env python# -*- coding:utf-8 -*-# name: 05_实现一个简单的装饰器 # author: li zhang# date: 2019/12/3import timedef clock(func):    print("this is a deco, named %s" % func)    def clocked(*args):  # 定义内部函数clocked，它接受任意个定位参数        t0 = time.perf_counter()        result = func(*args)        elapsed = time.perf_counter() - t0        name = func.__name__        arg_str = ', '.join(repr(arg) for arg in args)        print('[%0.8fs] %s(%s) -> %r' % (elapsed, name, arg_str, result))        return result    return clocked@clockdef snooze(seconds):    time.sleep(seconds)@clockdef factorial(n):    return 1 if n < 2 else n*factorial(n-1)if __name__ == '__main__':    snooze(4)  # snooze = clock(snooze)    factorial(5)t0 = time.perf_counter()print(t0)# 装饰器的典型行为，把被装饰的函数替换成新函数，二者接受相同的参数# 而且返回装饰的函数本该返回的值，同时还会做些额外操作